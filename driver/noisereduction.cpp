#include "noisereduction.h"
#include <stdio.h>
#include <QVector>


double matrix50[]={0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,
0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,
-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,
-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,
-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,
-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,
-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,
-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,
-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,
0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,
0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,
0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,
-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,
-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,
-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,
-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,
-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,
-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,
-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,
0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3,0.0809016994375,-0.130901699437,-0.0309016994375,-0.0190983005625,-0.1,-0.0190983005625,-0.0309016994375,-0.130901699437,0.0809016994375,0.3};

double matrix60[]={0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,
0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,
-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,
0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,
-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,
-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,
-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,
-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,
0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,
0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,
-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,
-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,
-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,
-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,
-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,
-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,
0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,
0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,
-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,
-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,
-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,
-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,0.00412011005676,
0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,-0.0893364397097,
-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24,0.0123468125762,
0.0123468125762,-0.0893364397097,0.00412011005676,-0.0762646420859,-0.01527864045,-0.0465064804396,-0.070565375832,0.205908677488,0.117993919564,-0.10472135955,-0.00756960961481,-0.0501269720026,-0.0501269720026,-0.00756960961481,-0.10472135955,0.117993919564,0.205908677488,-0.070565375832,-0.0465064804396,-0.01527864045,-0.0762646420859,0.00412011005676,-0.0893364397097,0.0123468125762,0.24};


void cancel_pwl_first(double *xvec, uint32_t block_len, int offset,double **matrix_m, double *yvec, double *svec)
{
  uint32_t row;
  uint32_t col;

  double acum;

  /* Projects  */
  for (row = 0; row < block_len; row++) {
    acum = 0.0;
    for (col = 0; col < block_len; col++) {
      acum += matrix_m[row][col]*xvec[col+offset];
    }
    svec[row] = acum;
    yvec[row] = xvec[row] - svec[row];
  }
}


void update_svec(double *xvec, uint32_t offset, uint32_t block_len, double **matrix_m, double *svec)
{
      uint32_t row;
      uint32_t col;

      double acum;

      /* Projects  */
      for (row = 0; row < block_len; row++) {
        acum = 0.0;
        for (col = 0; col < block_len; col++) {
          acum += matrix_m[row][col]*xvec[offset+col];
        }
        svec[row]        = (1.0 - CANCEL_ALPHA)*svec[row] + CANCEL_ALPHA*acum;
      }
}

double denoise_sample(double sample, double *svec, int index)
{
    double output;

    output = sample - svec[index];

    return output;
}

/*
 * cancel_pwl_signal
 * ------------------------------------------------------------------
 *  This function sweepd the vector XVEC by block of BLOCK_LEN.
 *  With each block projects it over the matrix space MATRIX_M
 *  to coherently cancell out the content of the mentioned space
 *  on XVEC. The output is written in vector YVEC.
 *
 * */
void cancel_pwl_signal(double *xvec, uint32_t block_len, double **matrix_m, double *yvec, double *svec)
{
  uint32_t row;
  uint32_t col;

  double acum;

  /* Projects  */
  for (row = 0; row < block_len; row++) {
    acum = 0.0;
    for (col = 0; col < block_len; col++) {
      acum += matrix_m[row][col]*xvec[col];
    }
    svec[row]        = (1.0 - CANCEL_ALPHA)*svec[row] + CANCEL_ALPHA*acum;
    yvec[row] = xvec[row] - svec[row];
  }
}


/*
 * detect_pwl_freq
 * ------------------------------------------------------------------
 *  This function projects the signal XVEC of lenghth XLEN
 *  over the matrices M50 and M60 of dimensions XLEN x XLEN.
 *  The function retruns 50 when the projection over M50
 *  has higher energy than the projection over M60.
 *  Otherwise it returns 60
 *
 * */
double detect_pwl_freq(double *xvec, uint32_t xlen, double **m50, double **m60, int xlen50, int xlen60)
{
  uint32_t row;
  uint32_t col;

  double p50_acum;
  double p60_acum;
  double acum_50;
  double acum_60;


  qDebug()<<"Length 60"<<xlen60;
  qDebug()<<"Length 50"<<xlen50;


  p50_acum = 0.0;
  p60_acum = 0.0;


  qDebug()<<"m60[0][0]"<<m60[0][0];

  for (row = 0; row < xlen60; row++) {
    acum_60 = 0.0;
    for (col = 0; col < xlen60; col++) {
      acum_60 += m60[row][col]*xvec[col];
    }
    p60_acum += acum_60*acum_60;

  }

  for (row = 0; row < xlen50; row++) {
    acum_50 = 0.0;
    for (col = 0; col < xlen50; col++) {
      acum_50 += m50[row][col]*xvec[col];
    }
    p50_acum += acum_50*acum_50;
  }

  p50_acum = p50_acum/xlen50;
  p60_acum = p60_acum/xlen60;


  qDebug()<<"p50_acum: "<<p50_acum;
  qDebug()<<"p60_acum: "<<p60_acum;


  if (p50_acum >= p60_acum)
    return 50.0;
  else
    return 60.0;
}



/*
 * CreateVector
 * ------------------------------------------------------------------
 * Allocates memory for a Vector of dimensions 1 x VLEN of typw doule
 * Return a pointer to the vector
 *
 * */
double* CreateVector(uint32_t vlen)
{
  double   *vec;
  uint32_t ind;

  vec = (double *) calloc(vlen, sizeof(double));
  if (vec == NULL) {
    printf(">>> WARNING: cannot allocate memory\n");
    fflush(stdout);
    return NULL;
  }

  return vec;
}



/*
 * CreateMatrix
 * ------------------------------------------------------------------
 * Allocates memory for a Matrix of dimensions ROWS x COLS of typw doule
 * Return a pointer to the matrix
 *
 * */
double** CreateMatrix(uint32_t rows, uint32_t cols)
{
  double   **mat;
  uint32_t ind;

  mat = (double **) calloc(rows, sizeof(double *));
  if (mat == NULL) {
    printf(">>> WARNING: cannot allocate memory\n");
    fflush(stdout);
  }

  for (ind = 0; ind < rows; ind++) {
    mat[ind] = (double *) calloc(cols, sizeof(double));
    if (mat[ind] == NULL) {
      printf(">>> WARNING: cannot allocate memory\n");
      fflush(stdout);
    }
  }

  return mat;
}


/*
 * FreeMatrix
 * ------------------------------------------------------------------
 *  Free memory space for a Matrix of dimensions ROWS x COLS of type double
 *
 *
 * */
void FreeMatrix(double **mat, uint32_t rows, uint32_t cols)
{
  uint32_t  ind;

  for (ind = 0; ind < rows; ind++) {
    free(mat[ind]);
  }
  free(mat);
}



/*
 * READ_VECTOR_FROM_FILE:
 * ------------------------------------------------------------------
 *  reads the file in FNAME and fills the contens of VECTOR
 *  of length VLEN.
 *  VECTOR must be allocated before calling this function.
 *
 *
 * */
void read_vexctor_from_file(const char *fname, double *xvec, uint32_t vlen)
{
  uint32_t col;
  double   num;
  FILE *   fid;

  /* Read M50 matrix from file */
  if((fid = fopen(fname, "r")) != NULL)
  {
      col = 0;
      while (!(feof(fid)) && (col < vlen)) {

          /* read single value from file */
          fscanf(fid, "%lf ", &num);
          xvec[col] = num;

          /* Update Matix indexes */
          col++;
      }
      fclose(fid);
   }
  else
      qDebug()<<"Cannot Open Vector";
}



/*
 * READ_MATRIX_FROM_FILE:
 * ------------------------------------------------------------------
 *  reads the file in FNAME and fills the contens of a square MATRIX
 *  of dimensions BLOCK_LEN x BLOCK_LEN.
 *  MATRIX must be allocated before calling this function.
 *
 *
 * */
void read_matrix_from_file(const char *fname, double **matrix, uint32_t block_len)
{
  uint8_t  row;
  uint8_t  col;
  double   num;


  /* Read M50 M60 matrix from file */
 FILE *fid;
 qDebug()<<fname;

  if((fid = fopen(fname, "r")) != NULL)
  {
      row = 0;
      col = 0;

      while (!(feof(fid)) && (row < block_len)) {

          /* read single value from file */
          fscanf(fid, "%lf ", &num);
          matrix[row][col] = num;

          /* Update Matix indexes */
          col++;
          col %= block_len;
          if (col == 0) {
            row++;
          }
      }
   }
   else
      qDebug()<<"Cannot Open File";

  fclose(fid);
}

void read_matrix_from_var(double *localmatrix, double **matrix, uint32_t block_len)
{
  uint8_t  row;
  uint8_t  col;
  double   num;


  /* Read M50 M60 matrix from var */

  row = 0;
  col = 0;
  int i = 0;

  while (row < block_len) {

      /* read single value from var */
      matrix[row][col] = localmatrix[i++];

      /* Update Matix indexes */
      col++;
      col %= block_len;
      if (col == 0) {
        row++;
      }
  }

}

//#define __DEBUGARTIFACTENOBIO20__
#ifdef __DEBUGARTIFACTENOBIO20__
#include <QFile>
#include <QDateTime>
QFile _debugArtifactEnobio20File;
#endif

NoiseReduction::NoiseReduction ()
{
    _numOfChannels=8;
    _delay = 100;
    _noiseFrequency=-1;
    _noiseReductionEnabled=true;


    qDebug()<<"Noise Reduction Constructor";

    /* Allocate Space for Matrices and Vectors                          */
    /* ---------------------------------------------------------------- */
    matrix_m50 = CreateMatrix(BLOCK_LEN_50, BLOCK_LEN_50);
    matrix_m60 = CreateMatrix(BLOCK_LEN_60, BLOCK_LEN_60);
    yvec       = CreateVector(XLEN);
    xvec       = CreateVector(BLOCK_LEN_60);
    svec       = CreateVector(BLOCK_LEN_60);
    /* ---------------------------------------------------------------- */

    for (int i=0;i<_numOfChannels;i++)
    {
        _Buffer[i].resize(BLOCK_LEN_60);
        _Buffer[i].fill(0);

        _BufferDenoised[i].resize(BLOCK_LEN_60);
        _BufferDenoised[i].fill(0);

    }

    /* Read M50 and M60 Matrices */
    //read_matrix_from_file("matrix_s50.dat", matrix_m50, BLOCK_LEN_50);
    //read_matrix_from_file("matrix_s60.dat", matrix_m60, BLOCK_LEN_60);
    read_matrix_from_var(matrix50, matrix_m50, BLOCK_LEN_50);
    read_matrix_from_var(matrix60, matrix_m60, BLOCK_LEN_60);
    _noiseState = EVALUATING_NOISE_FREQUENCY;

#ifdef __DEBUGARTIFACTENOBIO20__
    _debugArtifactEnobio20File.setFileName(QDateTime::currentDateTime().toString("yyyyMMddhhmss") +
                                           "_debugArtifact_preNoise.txt");
    _debugArtifactEnobio20File.open(QIODevice::WriteOnly | QIODevice::Text);
#endif

}

NoiseReduction::~NoiseReduction()
{
    /* Free Allocated vectors and Matrices */
    /* ---------------------------------------------------------------- */
    FreeMatrix(matrix_m50, BLOCK_LEN_50, BLOCK_LEN_50);
    FreeMatrix(matrix_m60, BLOCK_LEN_60, BLOCK_LEN_60);
    free(xvec);
    free(yvec);
    free(svec);

#ifdef __DEBUGARTIFACTENOBIO20__
    _debugArtifactEnobio20File.close();
#endif
}

ChannelData NoiseReduction::denoiseSample(ChannelData data)
{

#ifdef __DEBUGARTIFACTENOBIO20__
    QString strSample = "";
    for (int i=0;i<_numOfChannels;i++)
    {
        strSample.append(QString::number(data.data()[i]) + "\t");
    }
    strSample.append(QString::number(data.timestamp())+ "\n");
    _debugArtifactEnobio20File.write(strSample.toAscii());
#endif


    for (int i=0;i<_numOfChannels;i++)
    {
        _Buffer[i].push_back(data.data()[i]);
        _Buffer[i].pop_front();
    }


    if(_noiseState == EVALUATING_NOISE_FREQUENCY)
    {
            if (_delay>0)
            {
                //qDebug()<<"_delay"<<_delay;
                _delay--;
            }

            else
            {
                _noiseFrequency = detect_pwl_freq(_Buffer[0].data(), BLOCK_LEN_50, matrix_m50, matrix_m60, BLOCK_LEN_50 , BLOCK_LEN_60);

                qDebug()<<"Power Line Noise Detected: "<<_noiseFrequency;

                if (_noiseFrequency == 50.0)
                {
                  matrix_m = matrix_m50;
                  _blockLength=BLOCK_LEN_50;
                } else
                {
                  matrix_m = matrix_m60;
                  _blockLength=BLOCK_LEN_60;
                }



                for (int i=0;i<_numOfChannels;i++)
                {
                    for (int k=0;k<_blockLength;k++)
                        _Buffer[i].replace(k, _Buffer[i].at(k+BLOCK_LEN_60-_blockLength));

                    _Buffer[i].resize(_blockLength);
                    _BufferDenoised[i].resize(_blockLength);
                    _BufferDenoised[i].fill(0);

                    cancel_pwl_first(_Buffer[i].data(), _blockLength, BLOCK_LEN_60-_blockLength,matrix_m, yvec,_BufferDenoised[i].data());
                    data.setData(i,yvec[_blockLength-1]);

                }

                _noiseState = DENOISING;
            }

        }
        else
        {
            //If noise reduction is not enabled the noise reduction algorithm is not applied
            //Nevertheless the noise frequency stimation is previously calculated and the buffering
            //Is being performed in case the user decides to apply the noise reduction
            if (_noiseReductionEnabled)
            {
                for (int i=0;i<_numOfChannels;i++)
                {
                    cancel_pwl_first(_Buffer[i].data(), _blockLength, 0,matrix_m, yvec,_BufferDenoised[i].data());
                    data.setData(i,yvec[_blockLength-1]);

                }
            }
        }


     return data;
}

 void NoiseReduction::onNewData(ChannelData data, int numOfChannels)
 {

 }

 void NoiseReduction::enableLineNoiseCancelling()
 {
     _noiseReductionEnabled=true;
 }

void NoiseReduction::disableLineNoiseCancelling()
{
    _noiseReductionEnabled=false;
}

bool NoiseReduction::isDenoising()
{
    bool isDenoising;

    if(_noiseState == DENOISING)
        isDenoising = true;
     else
        isDenoising = false;

    return isDenoising;
}

void NoiseReduction::setNumOfChannels(int channels)
{
    _numOfChannels=channels;

    for (int i=0;i<_numOfChannels;i++)
    {
        _Buffer[i].resize(BLOCK_LEN_60);
        _Buffer[i].fill(0);

        _BufferDenoised[i].resize(BLOCK_LEN_60);
        _BufferDenoised[i].fill(0);

    }

}
